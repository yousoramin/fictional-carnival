#include <18F4550.h>

#device adc = 8

#include <math.h>
#include <stdlibm.h>

#fuses INTRC, CPUDIV1, PLL1, NOLVP, NOPROTECT, NOMCLR, NOWDT
#use delay(clock = 8M)

#use rs232(rcv=pin_c7,xmit=pin_c6,baud=9600,bits=8,parity=n)

char dataRS232;

#int_rda
void rcv_data(){
   dataRS232 = getch();
}

// nave 1
float last_ship_angle_1 = 0;
float ship_angle_1 = 0;
int last_x_pos_1;
int last_y_pos_1;
int x_pos_1 = 64;
int y_pos_1 = 32;
float dx_1 = 0; 
float dy_1 = 0;

// nave 2
float last_ship_angle_2 = 0;
float ship_angle_2 = 0;
int last_x_pos_2;
int last_y_pos_2;
int x_pos_2 = 64;
int y_pos_2 = 32;
float dx_2 = 0; 
float dy_2 = 0;

// bala 1
int1 bullet_1 = 0;
signed int last_last_bullet_x_pos_1;
signed int last_last_bullet_y_pos_1;
signed int last_bullet_x_pos_1;
signed int last_bullet_y_pos_1;
signed int16 bullet_x_pos_1;
signed int16 bullet_y_pos_1;
float bullet_dx_1 = 0; 
float bullet_dy_1 = 0;
const float bullet_speed_1 = 6;

// bala 2
int1 bullet_2 = 0;
signed int last_last_bullet_x_pos_2;
signed int last_last_bullet_y_pos_2;
signed int last_bullet_x_pos_2;
signed int last_bullet_y_pos_2;
signed int16 bullet_x_pos_2;
signed int16 bullet_y_pos_2;
float bullet_dx_2 = 0; 
float bullet_dy_2 = 0;
const float bullet_speed_2 = 6;

// asteroides
int last_asteroids_x_pos[20];
int last_asteroids_y_pos[20];
unsigned int asteroids_x_pos[20];
unsigned int asteroids_y_pos[20];
signed int asteroids_dx[20] = {-2,1,-3,3,-2,3,-1,2,-3,3,-2,2,-1,2,-1,2,-2,3,-2,-1};
signed int asteroids_dy[20] = {2,-1,-2,3,-2,2,-1,1,-2,3,-1,3,-2,-1,2,-3,-3,3,-2,1};

const float internal_angle = (2*(float)PI)/3.0f; 

void scores(unsigned int16 scr, unsigned int lvl, int1 color);

// obtener entradas
void get_inputs_1();
unsigned int p1_pot_x = 125;
unsigned int p1_pot_y = 125;
unsigned int p1_pot_xx = 125;
unsigned int p1_pot_yy = 125;
int1 p1_L = 0;
int1 p1_R = 0;

void get_inputs_2();
unsigned int p2_pot_x = 125;
unsigned int p2_pot_y = 125;
unsigned int p2_pot_xx = 125;
unsigned int p2_pot_yy = 125;
int1 p2_L = 0;
int1 p2_R = 0;

unsigned int level = 0;
unsigned int best_level = 0;
int1 new_level = 1;
unsigned int16 score = 0;
unsigned int16 best_score = 0;
unsigned int16 last_score = 10;
unsigned int last_level = 10;

char mode = 'i';

void main(){

   enable_interrupts(GLOBAL);
   enable_interrupts(int_rda);

   setup_adc_ports(AN0_TO_AN7);
   setup_adc(ADC_CLOCK_DIV_2);
   
   int menu_button = 0;

   while(TRUE){
      getc();
   
      get_inputs_1();
      get_inputs_2();
      /*
      switch(mode){
         case 'i':{ // inicio
           
            
         
            break;
         }
         case 's':{ // single
         
         }
         case 'm':{ // multiplayer
         
         }
         case 'j':{ // jugnado single
         
         }
         case 'J':{ // jugando multiplayer coop
         
         }
         case 'p':{ // jugando multiplayer pvp
         
         }
         default:{
         
         }
      }*/
      
      
      printf("p");
   }

}

void get_inputs_1(){
   set_adc_channel(0);
   delay_us(10);
   p1_pot_x = read_adc();
   delay_us(10);
   set_adc_channel(1);
   delay_us(10);
   p1_pot_y = read_adc();
   delay_us(10);
   set_adc_channel(2);
   delay_us(10);
   p1_pot_xx = read_adc();
   delay_us(10);
   set_adc_channel(3);
   delay_us(10);
   p1_pot_yy = read_adc();
   delay_us(10);
   if(input(PIN_D0))
      p1_L = 1;
   else
      p1_L = 0;
   if(input(PIN_D1))
      p1_R = 1;
   else
      p1_R = 0;   
}

void get_inputs_2(){
   set_adc_channel(4);
   delay_us(10);
   p2_pot_x = read_adc();
   delay_us(10);
   set_adc_channel(5);
   delay_us(10);
   p2_pot_y = read_adc();
   delay_us(10);
   set_adc_channel(6);
   delay_us(10);
   p2_pot_xx = read_adc();
   delay_us(10);
   set_adc_channel(7);
   delay_us(10);
   p2_pot_yy = read_adc();
   delay_us(10);
   if(input(PIN_D0))
      p2_L = 1;
   else
      p2_L = 0;
   if(input(PIN_D1))
      p2_R = 1;
   else
      p2_R = 0;   
}

void manage_menu(int m){

}
